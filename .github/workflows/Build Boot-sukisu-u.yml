name: Build Boot Image (AOSP Clang + SukiSU Option)  # 更新名称，明确工具链

# 仅手动触发
on:
  workflow_dispatch:
    inputs:
      kernel_branch:
        description: '内核源码分支'
        required: true
        default: 'lineage-22.2'
        type: string
      device_codename:
        description: '设备代号（如 pdx234）'
        required: true
        default: 'pdx234'
        type: string
      build_type:
        description: '编译类型'
        required: true
        default: 'original'
        type: choice
        options:
          - original  # 原内核（无 SukiSU）
          - with_sukisu  # 带 SukiSU 内核

jobs:
  # --------------------------
  # Job 1：依赖准备与缓存（AOSP Clang + SukiSU）
  # --------------------------
  prepare-dependencies:
    runs-on: ubuntu-22.04
    outputs:
      device_codename: ${{ github.event.inputs.device_codename || 'pdx234' }}
      kernel_branch: ${{ github.event.inputs.kernel_branch || 'lineage-22.2' }}
      build_type: ${{ github.event.inputs.build_type || 'original' }}
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Install download dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git git-lfs wget curl lz4 patch unzip

      # 1. 缓存内核源码（保持不变）
      - name: Cache kernel source
        id: cache-kernel
        uses: actions/cache@v3
        with:
          path: ./kernel
          key: kernel-${{ github.event.inputs.kernel_branch }}-${{ github.event.inputs.device_codename }}-${{ github.event.inputs.build_type }}-${{ runner.os }}
          restore-keys: |
            kernel-${{ github.event.inputs.kernel_branch }}-${{ github.event.inputs.device_codename }}-${{ github.event.inputs.build_type }}-

      - name: Clone kernel source (if not cached)
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        run: |
          KERNEL_REPO="https://github.com/LineageOS/android_kernel_sony_sm8550.git"
          KERNEL_BRANCH="${{ github.event.inputs.kernel_branch || 'lineage-22.2' }}"
          git clone $KERNEL_REPO kernel
          cd kernel && git checkout $KERNEL_BRANCH && git rev-parse HEAD > ../kernel_commit.txt

      # 2. 集成 SukiSU（保持不变）
      - name: Integrate SukiSU (if build type is with_sukisu)
        if: github.event.inputs.build_type == 'with_sukisu'
        run: |
          cd kernel
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s main
          
          if [ -f ./include/config/sukisu.h ]; then
            SUKISU_VERSION=$(grep "SUKISU_VERSION" ./include/config/sukisu.h | cut -d '"' -f2)
          elif [ -f ./include/config/kernelsu.h ]; then
            SUKISU_VERSION=$(grep "KSU_VERSION" ./include/config/kernelsu.h | cut -d '"' -f2)
          else
            SUKISU_VERSION="unknown"
          fi
          echo "SUKISU_VERSION=$SUKISU_VERSION" >> $GITHUB_ENV

      # 3. 缓存设备树（保持不变）
      - name: Cache device trees
        id: cache-device
        uses: actions/cache@v3
        with:
          path: |
            ./device/sony/${{ github.event.inputs.device_codename || 'pdx234' }}
            ./device/sony/sm8550-common
          key: device-${{ github.event.inputs.device_codename }}-${{ github.event.inputs.kernel_branch }}-${{ runner.os }}
          restore-keys: |
            device-${{ github.event.inputs.device_codename }}-

      - name: Clone device trees (if not cached)
        if: steps.cache-device.outputs.cache-hit != 'true'
        run: |
          DEVICE_CODENAME="${{ github.event.inputs.device_codename || 'pdx234' }}"
          KERNEL_BRANCH="${{ github.event.inputs.kernel_branch || 'lineage-22.2' }}"
          mkdir -p device/sony
          git clone https://github.com/LineageOS/android_device_sony_${DEVICE_CODENAME}.git device/sony/${DEVICE_CODENAME}
          git clone https://github.com/LineageOS/android_device_sony_sm8550-common.git device/sony/sm8550-common
          cd device/sony/${DEVICE_CODENAME} && git checkout $KERNEL_BRANCH && cd ../../..
          cd device/sony/sm8550-common && git checkout $KERNEL_BRANCH && cd ../../..

     # 替换工作流中 “Cache AOSP Prebuilt Clang” 和 “Clone AOSP Prebuilt Clang” 部分
      - name: Cache AOSP Prebuilt Clang (r547379)
        id: cache-aosp-clang
        uses: actions/cache@v3
        with:
          path: ./prebuilts/clang/host/linux-x86/clang-r547379
          key: aosp-clang-r547379-${{ runner.os }}
          restore-keys: |
            aosp-clang-r547379-

      - name: Clone AOSP Prebuilt Clang (r547379) if not cached
        if: steps.cache-aosp-clang.outputs.cache-hit != 'true'
        run: |
          mkdir -p prebuilts/clang/host/linux-x86
          # 克隆 AOSP 仓库的 clang-r547379 目录
          git clone -n --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/ \
            --filter=tree:0 \
            prebuilts/clang/host/linux-x86/clang-r547379
          cd prebuilts/clang/host/linux-x86/clang-r547379
          git sparse-checkout set clang-r547379
          git checkout refs/heads/main

          # 检查 Clang 可执行文件路径
            ls prebuilts/clang/host/linux-x86/clang-r547379/bin/clang
      
          # 查看 Clang 版本（若输出版本信息，说明获取成功）
          prebuilts/clang/host/linux-x86/clang-r547379/bin/clang --version
   
  # --------------------------
  # Job 2：AOSP Clang 编译内核与生成 boot.img
  # --------------------------
  compile-bootimg:
    runs-on: ubuntu-22.04
    needs: prepare-dependencies
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Install AOSP Clang build dependencies（保持不变，依赖通用）
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache flex g++-multilib gcc-multilib lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libssl-dev lzop rsync zip zlib1g-dev
          sudo apt-get install -y binutils-aarch64-linux-gnu

      # 恢复缓存（内核、设备树保持不变，新增 AOSP Clang 恢复）
      - name: Restore kernel source cache
        uses: actions/cache@v3
        with:
          path: ./kernel
          key: kernel-${{ needs.prepare-dependencies.outputs.kernel_branch }}-${{ needs.prepare-dependencies.outputs.device_codename }}-${{ needs.prepare-dependencies.outputs.build_type }}-${{ runner.os }}

      - name: Restore device trees cache
        uses: actions/cache@v3
        with:
          path: |
            ./device/sony/${{ needs.prepare-dependencies.outputs.device_codename }}
            ./device/sony/sm8550-common
          key: device-${{ needs.prepare-dependencies.outputs.device_codename }}-${{ needs.prepare-dependencies.outputs.kernel_branch }}-${{ runner.os }}

      - name: Restore AOSP Prebuilt Clang
        uses: actions/cache@v3
        with:
          path: ./prebuilts/clang/host/linux-x86/clang-r487747c
          key: aosp-clang-r487747c-${{ runner.os }}

      # 核心修改：配置 AOSP Clang 路径（替换原 NDK 路径配置）
      - name: Configure AOSP Clang Path
        run: |
          # AOSP Clang 工具链绝对路径（对应缓存的版本目录）
          AOSP_CLANG_BIN=$(pwd)/prebuilts/clang/host/linux-x86/clang-r487747c/bin
          
          # 添加到 PATH，确保编译时能找到工具链
          echo "PATH=$AOSP_CLANG_BIN:$PATH" >> $GITHUB_ENV
          # 验证工具链是否可访问
          echo "Clang version:"
          $AOSP_CLANG_BIN/clang --version

      # 核心修改：用 AOSP Clang 编译内核（适配工具链命名）
      - name: Build kernel with AOSP Clang
        run: |
          cd kernel
          # 基础配置（ARCH 保持 arm64）
          export ARCH=arm64
          # AOSP Clang 工具链命名（无 NDK 的 API 版本后缀）
          export CC=aarch64-linux-android-clang
          export CXX=aarch64-linux-android-clang++
          export LD=ld.lld
          export AR=llvm-ar
          export NM=llvm-nm
          export OBJCOPY=llvm-objcopy
          export OBJDUMP=llvm-objdump
          export STRIP=llvm-strip
          # 清除干扰变量（避免残留 NDK/其他编译器路径）
          unset GCC CCACHE_COMPILER

          # 加载设备专属 defconfig（AOSP 工具链直接支持 defconfig 命名）
          # 注意：需确保内核源码中存在 <设备代号>_defconfig（如 pdx234_defconfig）
          make O=out defconfig
          
          # 启用 SukiSU 配置（保持不变）
          if [ "${{ needs.prepare-dependencies.outputs.build_type }}" = "with_sukisu" ]; then
            make O=out menuconfig KCONFIG_CONFIG=out/.config -e CONFIG_KERNEL_SU=y CONFIG_KERNEL_SU_MODULES=y
          fi
          
          # 编译（使用 AOSP 工具链变量）
          make O=out -j$(nproc)

      # 生成 ramdisk（保持不变）
      - name: Prepare ramdisk
        run: |
          DEVICE_CODENAME="${{ needs.prepare-dependencies.outputs.device_codename }}"
          mkdir -p ramdisk
          cp -r device/sony/${DEVICE_CODENAME}/ramdisk/* ramdisk/
          cd ramdisk && find . | cpio -o -H newc | lz4 -l -12 -f - ../ramdisk.img && cd ..

      # 打包 boot.img（仅修改产物名称中的工具链标识）
      - name: Build boot.img
        run: |
          DEVICE_CODENAME="${{ needs.prepare-dependencies.outputs.device_codename }}"
          KERNEL_BRANCH="${{ needs.prepare-dependencies.outputs.kernel_branch }}"
          BUILD_TYPE="${{ needs.prepare-dependencies.outputs.build_type }}"
          
          wget https://github.com/osm0sis/mkbootimg/releases/latest/download/mkbootimg -O mkbootimg
          chmod +x mkbootimg
          
          # 产物名称：将 ndk-clang 改为 aosp-clang
          if [ "$BUILD_TYPE" = "with_sukisu" ]; then
            OUTPUT_NAME="boot-${DEVICE_CODENAME}-${KERNEL_BRANCH}-aosp-clang-sukisu-v${{ env.SUKISU_VERSION }}.img"
          else
            OUTPUT_NAME="boot-${DEVICE_CODENAME}-${KERNEL_BRANCH}-aosp-clang-original.img"
          fi
          
          ./mkbootimg \
            --kernel kernel/out/arch/arm64/boot/Image.gz-dtb \
            --ramdisk ramdisk.img \
            --base 0x00000000 \
            --cmdline "video=vfb:640x400,bpp=32,memsize=3072000 nosoftlockup" \
            --bootconfig "androidboot.hardware=qcom androidboot.memcg=1 androidboot.usbcontroller=a600000.dwc3" \
            --pagesize 4096 \
            --ramdiskoffset 0x01000000 \
            --tagsoffset 0x00000100 \
            --headerversion 4 \
            --osversion 14 \
            --ospatchlevel 2025-04 \
            --output $OUTPUT_NAME

      # 上传产物（修改 artifact 名称中的工具链标识）
      - name: Upload boot.img
        uses: actions/upload-artifact@v4
        with:
          name: boot-image-${{ needs.prepare-dependencies.outputs.device_codename }}-aosp-clang-${{ needs.prepare-dependencies.outputs.build_type }}
          path: boot-${{ needs.prepare-dependencies.outputs.device_codename }}-*.img
