name: Build Boot Image (LOS GCC + SukiSU Option)

# 仅手动触发
on:
  workflow_dispatch:
    inputs:
      kernel_branch:
        description: '内核源码分支'
        required: true
        default: 'lineage-22.2'
        type: string
      device_codename:
        description: '设备代号（如 pdx234）'
        required: true
        default: 'pdx234'
        type: string
      build_type:
        description: '编译类型'
        required: true
        default: 'original'
        type: choice
        options:
          - original  # 原内核（无 SukiSU）
          - with_sukisu  # 带 SukiSU 内核

jobs:
  # --------------------------
  # Job 1：依赖准备与缓存（LOS GCC 工具链 + SukiSU）
  # --------------------------
  prepare-dependencies:
    runs-on: ubuntu-22.04
    outputs:
      device_codename: ${{ github.event.inputs.device_codename || 'pdx234' }}
      kernel_branch: ${{ github.event.inputs.kernel_branch || 'lineage-22.2' }}
      build_type: ${{ github.event.inputs.build_type || 'original' }}
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Install download dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git git-lfs wget curl lz4 patch  # 移除unzip（无需解压缩NDK）

      # 1. 缓存内核源码（含SukiSU补丁区分）
      - name: Cache kernel source
        id: cache-kernel
        uses: actions/cache@v3
        with:
          path: ./kernel
          key: kernel-${{ github.event.inputs.kernel_branch }}-${{ github.event.inputs.device_codename }}-${{ github.event.inputs.build_type }}-${{ runner.os }}
          restore-keys: |
            kernel-${{ github.event.inputs.kernel_branch }}-${{ github.event.inputs.device_codename }}-${{ github.event.inputs.build_type }}-

      - name: Clone kernel source (if not cached)
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        run: |
          KERNEL_REPO="https://github.com/LineageOS/android_kernel_sony_sm8550.git"
          KERNEL_BRANCH="${{ github.event.inputs.kernel_branch || 'lineage-22.2' }}"
          git clone $KERNEL_REPO kernel
          cd kernel && git checkout $KERNEL_BRANCH && git rev-parse HEAD > ../kernel_commit.txt

      # 2. 集成 SukiSU（仅with_sukisu时执行）
      - name: Integrate SukiSU (if build type is with_sukisu)
        if: github.event.inputs.build_type == 'with_sukisu'
        run: |
          cd kernel
          # 执行SukiSU补丁脚本
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s main
          
          # 提取SukiSU版本
          if [ -f ./include/config/sukisu.h ]; then
            SUKISU_VERSION=$(grep "SUKISU_VERSION" ./include/config/sukisu.h | cut -d '"' -f2)
          elif [ -f ./include/config/kernelsu.h ]; then
            SUKISU_VERSION=$(grep "KSU_VERSION" ./include/config/kernelsu.h | cut -d '"' -f2)
          else
            SUKISU_VERSION="unknown"
          fi
          echo "SUKISU_VERSION=$SUKISU_VERSION" >> $GITHUB_ENV

      # 3. 缓存设备树
      - name: Cache device trees
        id: cache-device
        uses: actions/cache@v3
        with:
          path: |
            ./device/sony/${{ github.event.inputs.device_codename || 'pdx234' }}
            ./device/sony/sm8550-common
          key: device-${{ github.event.inputs.device_codename }}-${{ github.event.inputs.kernel_branch }}-${{ runner.os }}
          restore-keys: |
            device-${{ github.event.inputs.device_codename }}-

      - name: Clone device trees (if not cached)
        if: steps.cache-device.outputs.cache-hit != 'true'
        run: |
          DEVICE_CODENAME="${{ github.event.inputs.device_codename || 'pdx234' }}"
          KERNEL_BRANCH="${{ github.event.inputs.kernel_branch || 'lineage-22.2' }}"
          mkdir -p device/sony
          git clone https://github.com/LineageOS/android_device_sony_${DEVICE_CODENAME}.git device/sony/${DEVICE_CODENAME}
          git clone https://github.com/LineageOS/android_device_sony_sm8550-common.git device/sony/sm8550-common
          cd device/sony/${DEVICE_CODENAME} && git checkout $KERNEL_BRANCH && cd ../../..
          cd device/sony/sm8550-common && git checkout $KERNEL_BRANCH && cd ../../..

# 4. 缓存 LineageOS 官方 GCC 工具链（替换NDK）
- name: Cache LOS GCC toolchain
  id: cache-los-gcc
  uses: actions/cache@v3
  with:
    # 简化路径：直接指向克隆的根目录，避免多层嵌套错误
    path: ./aarch64-linux-android-4.9
    key: los-gcc-aarch64-4.9-lineage-19.1-${{ runner.os }}
    restore-keys: |
      los-gcc-aarch64-4.9-lineage-19.1-

- name: Clone LOS GCC toolchain (if not cached)
  if: steps.cache-los-gcc.outputs.cache-hit != 'true'
  run: |
    # 直接克隆到当前目录，目录名简化为 aarch64-linux-android-4.9
    git clone -b lineage-19.1 --depth 1 https://github.com/LineageOS/android_prebuilts_gcc_linux-x86_aarch64_aarch64-linux-android-4.9.git aarch64-linux-android-4.9
    # 强制拉取完整内容（避免浅克隆遗漏文件）
    cd aarch64-linux-android-4.9 && git fetch --depth=100 && git checkout lineage-19.1
    # 查看目录结构（调试用，确认bin目录存在）
    ls -l aarch64-linux-android-4.9

    
  # --------------------------
  # Job 2：LOS GCC编译内核与生成boot.img
  # --------------------------
  compile-bootimg:
    runs-on: ubuntu-22.04
    needs: prepare-dependencies
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Install GCC build dependencies
        run: |
          sudo apt-get update
          # 保留LineageOS内核编译必需依赖
          sudo apt-get install -y bc bison build-essential ccache flex g++-multilib gcc-multilib lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libssl-dev lzop rsync zip zlib1g-dev

      # 恢复内核源码缓存
      - name: Restore kernel source cache
        uses: actions/cache@v3
        with:
          path: ./kernel
          key: kernel-${{ needs.prepare-dependencies.outputs.kernel_branch }}-${{ needs.prepare-dependencies.outputs.device_codename }}-${{ needs.prepare-dependencies.outputs.build_type }}-${{ runner.os }}

      # 恢复设备树缓存
      - name: Restore device trees cache
        uses: actions/cache@v3
        with:
          path: |
            ./device/sony/${{ needs.prepare-dependencies.outputs.device_codename }}
            ./device/sony/sm8550-common
          key: device-${{ needs.prepare-dependencies.outputs.device_codename }}-${{ needs.prepare-dependencies.outputs.kernel_branch }}-${{ runner.os }}

# 恢复LineageOS GCC工具链并添加到PATH
- name: Restore LOS GCC toolchain
  uses: actions/cache@v3
  with:
    path: ./aarch64-linux-android-4.9
    key: los-gcc-aarch64-4.9-lineage-19.1-${{ runner.os }}

- name: Add LOS GCC to PATH (Force Path)
  run: |
    # 1. 先查找aarch64-linux-android-gcc的实际位置（自动定位，避免路径硬编码错误）
    GCC_BIN_PATH=$(find $(pwd)/aarch64-linux-android-4.9 -name "aarch64-linux-android-gcc" | xargs dirname 2>/dev/null)
    
    # 2. 若找到路径，添加到PATH；否则报错并显示目录结构
    if [ -n "$GCC_BIN_PATH" ]; then
      echo "Found GCC bin path: $GCC_BIN_PATH"
      echo "PATH=$GCC_BIN_PATH:$PATH" >> $GITHUB_ENV
    else
      echo "Error: aarch64-linux-android-gcc not found in toolchain!"
      echo "Toolchain root structure:"
      ls -lR $(pwd)/aarch64-linux-android-4.9  # 递归显示所有文件，便于排查
      exit 1
    fi
    
    # 3. 验证命令是否可用（最终确认）
    if ! command -v aarch64-linux-android-gcc &> /dev/null; then
      echo "Error: aarch64-linux-android-gcc still not in PATH!"
      echo "Current PATH: $PATH"
      exit 1
    fi
    aarch64-linux-android-gcc --version  # 显示版本，确认工具链正常

      # 用LOS GCC编译内核
      - name: Build kernel with LOS GCC
        run: |
          cd kernel
          # 配置LineageOS内核编译环境
          export ARCH=arm64
          # 指定LOS GCC工具链前缀（与工具链文件名匹配）
          export CROSS_COMPILE=aarch64-linux-android-
          export CROSS_COMPILE_ARM32=arm-linux-androideabi-  # 若需32位兼容（可选）
          # 清除可能的Clang环境变量干扰
          unset CC LD AR NM OBJCOPY OBJDUMP STRIP
          
          # 加载设备专属defconfig（LineageOS内核标准流程）
          make O=out defconfig
          
          # 启用SukiSU配置（若为with_sukisu版本）
          if [ "${{ needs.prepare-dependencies.outputs.build_type }}" = "with_sukisu" ]; then
            # 根据SukiSU实际配置项调整（此处为通用适配）
            make O=out menuconfig KCONFIG_CONFIG=out/.config -e CONFIG_SUKISU=y CONFIG_SUKISU_MODULES=y
          fi
          
          # 开始编译（-j$(nproc) 自动适配CPU核心数）
          make O=out -j$(nproc)

      # 生成ramdisk
      - name: Prepare ramdisk
        run: |
          DEVICE_CODENAME="${{ needs.prepare-dependencies.outputs.device_codename }}"
          mkdir -p ramdisk
          cp -r device/sony/${DEVICE_CODENAME}/ramdisk/* ramdisk/
          cd ramdisk && find . | cpio -o -H newc | lz4 -l -12 -f - ../ramdisk.img && cd ..

      # 打包boot.img
      - name: Build boot.img
        run: |
          DEVICE_CODENAME="${{ needs.prepare-dependencies.outputs.device_codename }}"
          KERNEL_BRANCH="${{ needs.prepare-dependencies.outputs.kernel_branch }}"
          BUILD_TYPE="${{ needs.prepare-dependencies.outputs.build_type }}"
          
          # 下载mkbootimg工具
          wget https://github.com/osm0sis/mkbootimg/releases/latest/download/mkbootimg -O mkbootimg
          chmod +x mkbootimg
          
          # 产物名含LOS GCC标识，便于区分
          if [ "$BUILD_TYPE" = "with_sukisu" ]; then
            OUTPUT_NAME="boot-${DEVICE_CODENAME}-${KERNEL_BRANCH}-los-gcc-sukisu-v${{ env.SUKISU_VERSION }}.img"
          else
            OUTPUT_NAME="boot-${DEVICE_CODENAME}-${KERNEL_BRANCH}-los-gcc-original.img"
          fi
          
          # 打包boot.img（参数与LineageOS设备树匹配）
          ./mkbootimg \
            --kernel kernel/out/arch/arm64/boot/Image.gz-dtb \
            --ramdisk ramdisk.img \
            --base 0x00000000 \
            --cmdline "video=vfb:640x400,bpp=32,memsize=3072000 nosoftlockup" \
            --bootconfig "androidboot.hardware=qcom androidboot.memcg=1 androidboot.usbcontroller=a600000.dwc3" \
            --pagesize 4096 \
            --ramdiskoffset 0x01000000 \
            --tagsoffset 0x00000100 \
            --headerversion 4 \
            --osversion 14 \
            --ospatchlevel 2025-04 \
            --output $OUTPUT_NAME

      # 上传产物
      - name: Upload boot.img
        uses: actions/upload-artifact@v4
        with:
          name: boot-image-${{ needs.prepare-dependencies.outputs.device_codename }}-los-gcc-${{ needs.prepare-dependencies.outputs.build_type }}
          path: boot-${{ needs.prepare-dependencies.outputs.device_codename }}-*.img
