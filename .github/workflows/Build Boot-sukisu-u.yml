name: Build Boot Image (AOSP Clang Latest + SukiSU Option)  # 明确“最新版”

# 仅手动触发
on:
  workflow_dispatch:
    inputs:
      kernel_branch:
        description: '内核源码分支'
        required: true
        default: 'lineage-22.2'
        type: string
      device_codename:
        description: '设备代号（如 pdx234）'
        required: true
        default: 'pdx234'
        type: string
      build_type:
        description: '编译类型'
        required: true
        default: 'original'
        type: choice
        options:
          - original  # 原内核（无 SukiSU）
          - with_sukisu  # 带 SukiSU 内核

jobs:
  # --------------------------
  # Job 1：依赖准备与缓存（最新 AOSP Clang + SukiSU）
  # --------------------------
  prepare-dependencies:
    runs-on: ubuntu-22.04
    outputs:
      device_codename: ${{ github.event.inputs.device_codename || 'pdx234' }}
      kernel_branch: ${{ github.event.inputs.kernel_branch || 'lineage-22.2' }}
      build_type: ${{ github.event.inputs.build_type || 'original' }}
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Install download dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git git-lfs wget curl lz4 patch unzip

      # 1. 缓存内核源码（保持不变）
      - name: Cache kernel source
        id: cache-kernel
        uses: actions/cache@v3
        with:
          path: ./kernel
          key: kernel-${{ github.event.inputs.kernel_branch }}-${{ github.event.inputs.device_codename }}-${{ github.event.inputs.build_type }}-${{ runner.os }}
          restore-keys: |
            kernel-${{ github.event.inputs.kernel_branch }}-${{ github.event.inputs.device_codename }}-${{ github.event.inputs.build_type }}-

      - name: Clone kernel source (if not cached)
        if: steps.cache-kernel.outputs.cache-hit != 'true'
        run: |
          KERNEL_REPO="https://github.com/LineageOS/android_kernel_sony_sm8550.git"
          KERNEL_BRANCH="${{ github.event.inputs.kernel_branch || 'lineage-22.2' }}"
          git clone $KERNEL_REPO kernel
          cd kernel && git checkout $KERNEL_BRANCH && git rev-parse HEAD > ../kernel_commit.txt

      # 2. 集成 SukiSU（保持不变）
      - name: Integrate SukiSU (if build type is with_sukisu)
        if: github.event.inputs.build_type == 'with_sukisu'
        run: |
          cd kernel
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s main
          
          if [ -f ./include/config/sukisu.h ]; then
            SUKISU_VERSION=$(grep "SUKISU_VERSION" ./include/config/sukisu.h | cut -d '"' -f2)
          elif [ -f ./include/config/kernelsu.h ]; then
            SUKISU_VERSION=$(grep "KSU_VERSION" ./include/config/kernelsu.h | cut -d '"' -f2)
          else
            SUKISU_VERSION="unknown"
          fi
          echo "SUKISU_VERSION=$SUKISU_VERSION" >> $GITHUB_ENV

      # 3. 缓存设备树（保持不变）
      - name: Cache device trees
        id: cache-device
        uses: actions/cache@v3
        with:
          path: |
            ./device/sony/${{ github.event.inputs.device_codename || 'pdx234' }}
            ./device/sony/sm8550-common
          key: device-${{ github.event.inputs.device_codename }}-${{ github.event.inputs.kernel_branch }}-${{ runner.os }}
          restore-keys: |
            device-${{ github.event.inputs.device_codename }}-

      - name: Clone device trees (if not cached)
        if: steps.cache-device.outputs.cache-hit != 'true'
        run: |
          DEVICE_CODENAME="${{ github.event.inputs.device_codename || 'pdx234' }}"
          KERNEL_BRANCH="${{ github.event.inputs.kernel_branch || 'lineage-22.2' }}"
          mkdir -p device/sony
          git clone https://github.com/LineageOS/android_device_sony_${DEVICE_CODENAME}.git device/sony/${DEVICE_CODENAME}
          git clone https://github.com/LineageOS/android_device_sony_sm8550-common.git device/sony/sm8550-common
          cd device/sony/${DEVICE_CODENAME} && git checkout $KERNEL_BRANCH && cd ../../..
          cd device/sony/sm8550-common && git checkout $KERNEL_BRANCH && cd ../../..

      # 4. 缓存 AOSP 最新版 Clang（替换固定版本）
      - name: Cache AOSP Prebuilt Clang (Latest)
        id: cache-aosp-clang
        uses: actions/cache@v3
        with:
          # 统一使用 "clang-latest" 目录，避免版本号硬编码
          path: ./prebuilts/clang/host/linux-x86/clang-latest
          # 缓存 key 不含版本号，确保每次获取最新
          key: aosp-clang-latest-${{ runner.os }}
          restore-keys: |
            aosp-clang-latest-

      # 5. 克隆 AOSP 最新版 Clang（若未缓存）
      - name: Clone AOSP Prebuilt Clang (Latest) if not cached
        if: steps.cache-aosp-clang.outputs.cache-hit != 'true'
        run: |
          # 创建基础目录
          mkdir -p prebuilts/clang/host/linux-x86
          
          # 浅克隆 AOSP 预编译 Clang 仓库（仅最新提交，体积小）
          git clone --depth=1 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/ prebuilts/clang/host/linux-x86/temp_clone
          
          # 查找最新的 clang-r<数字> 目录（按版本号排序，取最后一个）
          # 格式示例：clang-r547379、clang-r550300，sort -V 按版本号升序排列
          LATEST_CLANG_DIR=$(ls -1d prebuilts/clang/host/linux-x86/temp_clone/clang-r* | sort -V | tail -n1)
          
          # 重命名为 "clang-latest"，便于后续统一引用
          mv $LATEST_CLANG_DIR prebuilts/clang/host/linux-x86/clang-latest
          
          # 删除临时克隆目录（仅保留最新版，节省空间）
          rm -rf prebuilts/clang/host/linux-x86/temp_clone
          
          # 验证：检查 Clang 可执行文件是否存在
          echo "✅ 最新 Clang 目录：$LATEST_CLANG_DIR"
          if [ -f "prebuilts/clang/host/linux-x86/clang-latest/bin/clang" ]; then
            echo "✅ Clang 工具链获取成功！版本信息："
            prebuilts/clang/host/linux-x86/clang-latest/bin/clang --version
          else
            echo "❌ Clang 工具链缺失！"
            exit 1  # 终止工作流，提示错误
          fi

  # --------------------------
  # Job 2：用 AOSP 最新 Clang 编译内核与生成 boot.img
  # --------------------------
  compile-bootimg:
    runs-on: ubuntu-22.04
    needs: prepare-dependencies
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v4

      - name: Install AOSP Clang build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y bc bison build-essential ccache flex g++-multilib gcc-multilib lib32ncurses5-dev lib32readline-dev lib32z1-dev libelf-dev liblz4-tool libncurses5-dev libssl-dev lzop rsync zip zlib1g-dev
          sudo apt-get install -y binutils-aarch64-linux-gnu

      # 恢复缓存（内核、设备树保持不变，Clang 恢复最新版）
      - name: Restore kernel source cache
        uses: actions/cache@v3
        with:
          path: ./kernel
          key: kernel-${{ needs.prepare-dependencies.outputs.kernel_branch }}-${{ needs.prepare-dependencies.outputs.device_codename }}-${{ needs.prepare-dependencies.outputs.build_type }}-${{ runner.os }}

      - name: Restore device trees cache
        uses: actions/cache@v3
        with:
          path: |
            ./device/sony/${{ needs.prepare-dependencies.outputs.device_codename }}
            ./device/sony/sm8550-common
          key: device-${{ needs.prepare-dependencies.outputs.device_codename }}-${{ needs.prepare-dependencies.outputs.kernel_branch }}-${{ runner.os }}

      - name: Restore AOSP Prebuilt Clang (Latest)
        uses: actions/cache@v3
        with:
          path: ./prebuilts/clang/host/linux-x86/clang-latest
          key: aosp-clang-latest-${{ runner.os }}

      - name: Configure AOSP Clang Path (Latest)
        run: |
          # 工具链绝对路径
          AOSP_CLANG_BIN=$(pwd)/prebuilts/clang/host/linux-x86/clang-latest/bin
    
          # 强制将 AOSP Clang 路径放在 PATH 最前面，覆盖系统默认
          echo "PATH=$AOSP_CLANG_BIN:$PATH" >> $GITHUB_ENV
    
          # 验证路径是否正确（关键调试步骤）
          echo "AOSP Clang 路径: $AOSP_CLANG_BIN"
          echo "当前 PATH: $PATH"
    
          # 验证 AOSP Clang 是否被正确识别
          echo "🔍 验证 AOSP Clang 版本："
          $AOSP_CLANG_BIN/clang --version  # 直接用绝对路径验证
    
          # 验证 ld.lld 是否存在
          echo "🔍 验证 ld.lld 是否存在："
          if [ -f "$AOSP_CLANG_BIN/ld.lld" ]; then
            echo "✅ ld.lld 路径：$AOSP_CLANG_BIN/ld.lld"
            $AOSP_CLANG_BIN/ld.lld --version
          else
            echo "❌ AOSP Clang 工具链中未找到 ld.lld！"
            exit 1
          fi

      # 用 AOSP 最新 Clang 编译内核（工具链命名适配）
      - name: Build kernel with AOSP Clang (Latest)
        run: |
          cd kernel
          # 基础架构配置
          export ARCH=arm64
          # AOSP Clang 标准工具链命名（无版本后缀，自动匹配 latest 目录）
          export CC=aarch64-linux-android-clang
          export CXX=aarch64-linux-android-clang++
          export LD=ld.lld
          export AR=llvm-ar
          export NM=llvm-nm
          export OBJCOPY=llvm-objcopy
          export OBJDUMP=llvm-objdump
          export STRIP=llvm-strip
          # 清除干扰变量（避免冲突）
          unset GCC CCACHE_COMPILER

          # 加载设备专属 defconfig（需内核源码存在 <设备代号>_defconfig）
          echo "📝 加载 defconfig：${{ needs.prepare-dependencies.outputs.device_codename }}_defconfig"
          make O=out defconfig ${needs.prepare-dependencies.outputs.device_codename}_defconfig
          
          # 启用 SukiSU 配置（保持不变）
          if [ "${{ needs.prepare-dependencies.outputs.build_type }}" = "with_sukisu" ]; then
            echo "🔧 启用 SukiSU 配置"
            make O=out menuconfig KCONFIG_CONFIG=out/.config -e CONFIG_KERNEL_SU=y CONFIG_KERNEL_SU_MODULES=y
          fi
          
          # 多核编译（利用 GitHub Actions 全部核心）
          echo "🚀 开始编译内核，线程数：$(nproc)"
          make O=out -j$(nproc)

      # 生成 ramdisk（保持不变）
      - name: Prepare ramdisk
        run: |
          DEVICE_CODENAME="${{ needs.prepare-dependencies.outputs.device_codename }}"
          mkdir -p ramdisk
          cp -r device/sony/${DEVICE_CODENAME}/ramdisk/* ramdisk/
          cd ramdisk && find . | cpio -o -H newc | lz4 -l -12 -f - ../ramdisk.img && cd ..
          echo "✅ ramdisk.img 生成完成"

      # 打包 boot.img（产物名称含“latest-clang”标识）
      - name: Build boot.img
        run: |
          DEVICE_CODENAME="${{ needs.prepare-dependencies.outputs.device_codename }}"
          KERNEL_BRANCH="${{ needs.prepare-dependencies.outputs.kernel_branch }}"
          BUILD_TYPE="${{ needs.prepare-dependencies.outputs.build_type }}"
          
          # 下载最新版 mkbootimg 工具
          wget https://github.com/osm0sis/mkbootimg/releases/latest/download/mkbootimg -O mkbootimg
          chmod +x mkbootimg
          
          # 产物名称：添加“latest-clang”标识，区分固定版本
          if [ "$BUILD_TYPE" = "with_sukisu" ]; then
            OUTPUT_NAME="boot-${DEVICE_CODENAME}-${KERNEL_BRANCH}-aosp-latest-clang-sukisu-v${{ env.SUKISU_VERSION }}.img"
          else
            OUTPUT_NAME="boot-${DEVICE_CODENAME}-${KERNEL_BRANCH}-aosp-latest-clang-original.img"
          fi
          
          # 打包 boot.img（参数保持原配置）
          ./mkbootimg \
            --kernel kernel/out/arch/arm64/boot/Image.gz-dtb \
            --ramdisk ramdisk.img \
            --base 0x00000000 \
            --cmdline "video=vfb:640x400,bpp=32,memsize=3072000 nosoftlockup" \
            --bootconfig "androidboot.hardware=qcom androidboot.memcg=1 androidboot.usbcontroller=a600000.dwc3" \
            --pagesize 4096 \
            --ramdiskoffset 0x01000000 \
            --tagsoffset 0x00000100 \
            --headerversion 4 \
            --osversion 14 \
            --ospatchlevel 2025-04 \
            --output $OUTPUT_NAME
          
          echo "✅ boot.img 生成完成：$OUTPUT_NAME"
          ls -lh $OUTPUT_NAME  # 显示产物大小，验证是否生成

      # 上传产物（名称含“latest-clang”）
      - name: Upload boot.img
        uses: actions/upload-artifact@v4
        with:
          name: boot-image-${{ needs.prepare-dependencies.outputs.device_codename }}-aosp-latest-clang-${{ needs.prepare-dependencies.outputs.build_type }}
          path: boot-${{ needs.prepare-dependencies.outputs.device_codename }}-*.img
